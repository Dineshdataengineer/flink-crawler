package com.scaleunlimited.flinkcrawler.sources;

import org.apache.flink.api.java.tuple.Tuple0;
import org.apache.flink.streaming.api.functions.source.SourceFunction;

/**
 * Generate an empty (Tuple0) tuple every X milliseconds. This gets
 * connected with other "real" streams and used (via a CoFlatMap function)
 * to trigger any results that have asynchronously been generated by the
 * multi-threaded operator running in the function.
 *
 */
@SuppressWarnings("serial")
public class TickleSource implements SourceFunction<Tuple0> {

	public static final long DEFAULT_TICKLE_INTERVAL = 100;
	public static final long INFINITE_RUN_TIME = 0;
	
	private boolean _keepRunning = false;
	private long _tickleInterval;
	private long _runTime;
	
	public TickleSource() {
		this(INFINITE_RUN_TIME);
	}
	
	public TickleSource(long runTime) {
		this(runTime, DEFAULT_TICKLE_INTERVAL);
	}

	public TickleSource(long runTime, long tickleInterval) {
		_runTime = runTime;
		_tickleInterval = tickleInterval;
	}

	@Override
	public void cancel() {
		_keepRunning = false;
	}

	@Override
	public void run(SourceContext<Tuple0> context) throws Exception {
		_keepRunning = true;
		long endTime = System.currentTimeMillis() + _runTime;
		
		while (_keepRunning && ((_runTime == INFINITE_RUN_TIME) || (System.currentTimeMillis() < endTime))) {
			context.collect(new Tuple0());
			Thread.sleep(_tickleInterval);
		}
	}

}
